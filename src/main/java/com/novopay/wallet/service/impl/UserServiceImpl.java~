package com.novopay.wallet.service.impl;

import com.novopay.wallet.dto.LoginDto;
import com.novopay.wallet.dto.UserDto;
import com.novopay.wallet.exception.UserAlreadyAvailableException;
import com.novopay.wallet.exception.UserNotFound;
import com.novopay.wallet.model.AuthenticationResponse;
import com.novopay.wallet.model.User;
import com.novopay.wallet.model.Wallet;
import com.novopay.wallet.repository.UserRepository;
import com.novopay.wallet.repository.WalletRepository;
import com.novopay.wallet.service.UserService;
import com.novopay.wallet.utils.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private BCryptPasswordEncoder bCryptPasswordEncoder;

    @Autowired
    private UserRepository userRepository;


    @Autowired
    private WalletRepository walletRepository;

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtUtil jwtTokenUtil;

    @Override
    public User signUp(UserDto userData) {

        final String encryptedPassword = bCryptPasswordEncoder.encode(userData.getPassword());


        User availableUser = userRepository.findByEmail(userData.getEmail());
        if (availableUser != null) {
            throw new UserAlreadyAvailableException("user already available with same email Id");
        }

        Wallet wallet = Wallet.builder().balance(0.0).build();
        walletRepository.save(wallet);
        User user = User.builder().firstName(userData.getFirstName()).lastName(userData.getLastName()).password(encryptedPassword).email(userData.getEmail()).pin(userData.getPin()).wallet(wallet).build();


        userRepository.save(user);
        return user;
    }

    @Override
    public AuthenticationResponse signIn(LoginDto loginData) throws UserNotFound {

        try {
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(loginData.getUserName(), loginData.getPassword())
            );
        } catch (BadCredentialsException e) {
            throw new UserNotFound("Incorrect username or password", e);
        }


        final UserDetails userDetails = userRepository.findByEmail(loginData.getUserName());

        final String jwt = jwtTokenUtil.generateToken(userDetails);

        return new AuthenticationResponse(jwt);

    }
}
